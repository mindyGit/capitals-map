import{ac as p,s as m,ai as s}from"./index-Dkoz-3t0.js";import{p as a}from"./MeshVertexAttributes-BZoBX75v.js";import{B as n}from"./vertexSpaceConversion-CJwHtyUw.js";import"./meshProperties-Cj6q1fp6.js";import"./mat3f64-B5o_lm6j.js";import"./mat4f64-q_b6UJoq.js";import"./spatialReferenceEllipsoidUtils-Clj7L12d.js";import"./computeTranslationToOriginAndRotation-CioZZFUw.js";import"./projectPointToVector-Dq9nTgXM.js";import"./meshVertexSpaceUtils-FoTIpRdf.js";import"./MeshLocalVertexSpace-NtALTPM-.js";import"./vec3-B4WsE9Vy.js";import"./BufferView-BuUbal4j.js";import"./vec4-CWPkTQ7y.js";async function E(t,r,o){await Promise.resolve(),p(o);const e=n(t,r,{useEllipsoid:o?.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new a({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),r);return i.transform=null,i}export{E as convertMeshVertexSpace};
