import{U as f,bg as u,W as p,cl as a,a9 as S}from"./index-Dkoz-3t0.js";import{c as y}from"./GeographicTransformation--V6klbXV.js";import{c as i,f as d,I as x,R as h,T as O,D as N,j as J,u as g,s as B}from"./dataUtils-BMO78Gkl.js";import{h as P,j as b,_ as k,p as v}from"./RasterSymbolizer-D3i0TUvl.js";import{T as w}from"./rasterFunctionHelper-BBmv6KHQ.js";import{v as z,s as T}from"./rasterProjectionHelper-BA1qQpoD.js";import{t as D,m as $,n as I}from"./PolynomialTransform-DHZAZskl.js";import"./_commonjsHelpers-DCkdB7M8.js";import"./colorUtils-Bm-Ynj_a.js";import"./clipUtils-CmFf6bp9.js";var m;let l=m=class extends D{constructor(){super(...arguments),this.type="identity"}clone(){return new m}};f([u({IdentityXform:"identity"})],l.prototype,"type",void 0),l=m=f([p("esri.layers.support.rasterTransforms.IdentityTransform")],l);const j={GCSShiftXform:I,IdentityXform:l,PolynomialXform:$};function F(n){if(!n?.type)return null;const e=j[n?.type];if(e){const r=new e;return r.read(n),r}return null}class V{convertVectorFieldData(t){const e=i.fromJSON(t.pixelBlock),r=d(e,t.type);return Promise.resolve(r!=null?r.toJSON():null)}computeStatisticsHistograms(t){const e=i.fromJSON(t.pixelBlock),r=P(e);return Promise.resolve(r)}async decode(t){const e=await b(t.data,t.options);return e&&e.toJSON()}symbolize(t){t.pixelBlock=i.fromJSON(t.pixelBlock),t.extent=t.extent?a.fromJSON(t.extent):null;const e=this.symbolizer.symbolize(t);return Promise.resolve(e!=null?e.toJSON():null)}async updateSymbolizer(t){this.symbolizer=k.fromJSON(t.symbolizerJSON),t.histograms&&this.symbolizer?.rendererJSON.type==="rasterStretch"&&(this.symbolizer.rendererJSON.histograms=t.histograms)}async updateRasterFunction(t){this.rasterFunction=w(t.rasterFunctionJSON)}async process(t){const e=this.rasterFunction.process({extent:a.fromJSON(t.extent),primaryPixelBlocks:t.primaryPixelBlocks.map((r=>r!=null?i.fromJSON(r):null)),primaryPixelSizes:t.primaryPixelSizes?.map((r=>r!=null?S.fromJSON(r):null)),primaryRasterIds:t.primaryRasterIds});return e!=null?e.toJSON():null}stretch(t){const e=this.symbolizer.simpleStretch(i.fromJSON(t.srcPixelBlock),t.stretchParams);return Promise.resolve(e?.toJSON())}estimateStatisticsHistograms(t){const e=v(i.fromJSON(t.srcPixelBlock));return Promise.resolve(e)}split(t){const e=x(i.fromJSON(t.srcPixelBlock),t.tileSize,t.maximumPyramidLevel??0,t.useBilinear===!1);return e&&e.forEach(((r,s)=>{e.set(s,r?.toJSON())})),Promise.resolve(e)}clipTile(t){const e=i.fromJSON(t.pixelBlock),r=h({...t,pixelBlock:e});return Promise.resolve(r?.toJSON())}async mosaicAndTransform(t){const e=t.srcPixelBlocks.map((c=>c?new i(c):null)),r=O(e,t.srcMosaicSize,{blockWidths:t.blockWidths,alignmentInfo:t.alignmentInfo,clipOffset:t.clipOffset,clipSize:t.clipSize});let s,o=r;return t.coefs&&(o=N(r,t.destDimension,t.coefs,t.sampleSpacing,t.interpolation)),t.projectDirections&&t.gcsGrid&&(s=J(t.destDimension,t.gcsGrid),o=g(o,t.isUV?"vector-uv":"vector-magdir",s)),{pixelBlock:o?.toJSON(),localNorthDirections:s}}async createFlowMesh(t,e){const r={data:new Float32Array(t.flowData.buffer),mask:new Uint8Array(t.flowData.maskBuffer),width:t.flowData.width,height:t.flowData.height},{vertexData:s,indexData:o}=await B(t.meshType,t.simulationSettings,r,e.signal);return{result:{vertexBuffer:s.buffer,indexBuffer:o.buffer},transferList:[s.buffer,o.buffer]}}async getProjectionOffsetGrid(t){const e=a.fromJSON(t.projectedExtent),r=a.fromJSON(t.srcBufferExtent);let s=null;t.datumTransformationSteps?.length&&(s=new y({steps:t.datumTransformationSteps})),await z();const o=t.rasterTransform?F(t.rasterTransform):null;return T({...t,projectedExtent:e,srcBufferExtent:r,datumTransformation:s,rasterTransform:o})}}export{V as default};
