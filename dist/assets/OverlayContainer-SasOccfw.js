import{U as i,jk as I,jl as A,jm as J,a4 as Q,j0 as X,dJ as U,i$ as V,bq as Z,j1 as tt,j2 as et,j3 as st,j4 as ot,j5 as it,j6 as rt,j7 as at,bY as nt,jn as dt,jo as q}from"./index-D_kIto8P.js";import{r as pt}from"./vec3f32-WCVSSNPR.js";import{n as ht}from"./WGLContainer-DmucEZBL.js";import{o as lt}from"./FeatureCommandQueue-BuZYQTYD.js";import{t as G}from"./utils-ehcGqGxa.js";import{j as ut,_ as P,y as ct,X as ft,c as x,e as vt,d as mt,w as yt,f as L,g as n,r as wt,U as xt,m as B,i as gt,P as N,v as _t,t as Mt}from"./GraphShaderModule-CKgX9lrV.js";import{e as St}from"./TechniqueType-pk2C5RYg.js";import{t as W}from"./VertexElementDescriptor-BLyltQyJ.js";class E extends gt{}i([L(0,x)],E.prototype,"pos",void 0),i([L(1,x)],E.prototype,"uv",void 0);class $t extends _t{}class k extends N{}i([n(wt)],k.prototype,"dvs",void 0);class m extends N{}i([n(x)],m.prototype,"perspective",void 0),i([n(x)],m.prototype,"texSize",void 0),i([n(P)],m.prototype,"wrapAroundShift",void 0),i([n(P)],m.prototype,"opacity",void 0),i([n(xt)],m.prototype,"texture",void 0);class w extends ut{constructor(){super(...arguments),this.type="OverlayShader"}vertex(e){const t=e.uv.divide(this.config.texSize),s=new P(1).add(ct(t,this.config.perspective)),o=new ft(e.pos.add(new x(this.config.wrapAroundShift,0)),1),r=this.transform.dvs.multiply(o);return{uv:t,glPosition:new vt(r.xy.multiply(s),0,s)}}fragment(e){const t=mt(this.config.texture,e.uv).multiply(this.config.opacity),s=new yt;return s.fragColor=t,s}}i([n(k)],w.prototype,"transform",void 0),i([n(m)],w.prototype,"config",void 0),i([I(0,B(E))],w.prototype,"vertex",null),i([I(0,B($t))],w.prototype,"fragment",null);class jt extends Mt{constructor(){super(...arguments),this.type=St.Overlay,this._mesh=null,this.shaders={overlay:new w}}render(e,t){const{context:s,painter:o}=e,r=this._getMesh(e,t);o.setPipelineState(G);const{isWrapAround:d,wrapAroundShift:u}=t.config,c={...t.config,wrapAroundShift:0},f={shader:this.shaders.overlay,uniforms:{transform:t.transform,config:c},defines:null,optionalAttributes:null,useComputeBuffer:!1};o.setPipelineState({...G,stencil:{write:!1,test:{compare:J.EQUAL,op:{fail:A.KEEP,zFail:A.KEEP,zPass:A.REPLACE},ref:0,mask:255}}}),o.submitDrawMeshUntyped(s,f,r),d&&(c.wrapAroundShift=u,o.submitDrawMeshUntyped(s,f,r))}shutdown(){Q(this._mesh)}_getMesh(e,t){const{context:s}=e;if(this._mesh){const o=this._mesh.vertexBuffers.get("positions");if(!o)throw new Error("Buffer not found");o.buffer.setData(t.position)}else{const o=t.index!=null?t.index.length:t.position.length/2;this._mesh=new lt(s,{vertex:{positions:{data:t.position,attributes:[new W("pos",2,U.FLOAT,0,8)]},uvs:{data:t.tex,attributes:[new W("uv",2,U.UNSIGNED_SHORT,0,4)]}},index:t.index!=null?{index:{data:t.index}}:void 0,groups:[{index:t.index!=null?"index":void 0,primitive:X.TRIANGLE_STRIP}],parts:[{group:0,start:0,count:o}]})}return this._mesh}}class Tt extends ht{constructor(){super(...arguments),this._viewStateId=-1,this._dvsMat3=V(),this._overlayTechnique=new jt}get dvsMat3(){return this._dvsMat3}beforeRender(e){this._updateMatrices(e),this._updateOverlays(e,this.children);for(const t of this.children)t.beforeRender(e)}doRender(e){if(e.drawPhase!==Z.MAP||!this.visible)return;super.doRender(e);const t=this._overlayTechnique;for(const s of this.children)s.draw(e,t)}onDetach(){this._overlayTechnique.shutdown()}_updateMatrices(e){const{state:t}=e,{id:s,size:o,pixelRatio:r,resolution:d,rotation:u,viewpoint:c,displayMat3:f}=t;if(this._viewStateId===s)return;const g=q(u),p=r*o[0],v=r*o[1];this._localOrigin=c.targetGeometry.clone();const{x:y,y:S}=this._localOrigin,_=tt(y,t.spatialReference);this._localOrigin.x=_,this._localOrigin.y=S;const $=d*p,j=d*v,a=et(this._dvsMat3);st(a,a,f),ot(a,a,it(p/2,v/2)),rt(a,a,pt(p/$,-v/j,1)),at(a,a,-g),this._viewStateId=s}_updateOverlays(e,t){const{state:s}=e,{rotation:o,spatialReference:r,worldScreenWidth:d,size:u,viewpoint:c}=s,f=this._localOrigin;let g,p=0;const v=nt(r);if(v&&r.isWrappable){const y=u[0],S=u[1],_=q(o),$=Math.abs(Math.cos(_)),j=Math.abs(Math.sin(_)),a=Math.round(y*$+S*j),[C,D]=v.valid,h=dt(r),{x:T,y:F}=c.targetGeometry,K=[T,F],b=[0,0];s.toScreen(b,K);const M=[0,0];let O;O=a>d?.5*d:.5*a;const z=Math.floor((T+.5*h)/h),Y=C+z*h,H=D+z*h,R=[b[0]+O,0];s.toMap(M,R),M[0]>H&&(p=h),R[0]=b[0]-O,s.toMap(M,R),M[0]<Y&&(p=-h),g={worldWidth:h,xBounds:[C,D]}}for(const y of t)y.updateDrawCoords(f,p,s,g)}}export{Tt as u};
