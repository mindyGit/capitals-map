import{X as a,Y as n,v as d,U as u,W as l}from"./index-DMtm2B-0.js";import{c as g}from"./FeatureLayerView2D-C9Adlyc5.js";import"./Container-BEDStSj5.js";import"./featureConversionUtils-Dy9Scm0c.js";import"./OptimizedFeature-2VH_DZ3Q.js";import"./memoryEstimations-NOy1xLFp.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./timeSupport-D2Ygi2T5.js";import"./AttributeBinsFeatureSet-T7oN-a1f.js";import"./AttributeBinsQuery-Cg-1L3Cr.js";import"./queryUtils-B1xySi0w.js";import"./json-Wa8cmqdu.js";import"./FixedIntervalBinParameters-DNQUbKXQ.js";import"./LayerView-ByjwPeAS.js";import"./layerViewUtils-Bptl4vWF.js";import"./TechniqueInstance-CNs216IA.js";import"./UpdateTracking2D-CVMc0Djb.js";import"./BidiEngine-QXap_35O.js";import"./GeometryUtils-CAgdzrzA.js";import"./rasterizingUtils-DAKou6Tt.js";import"./floatRGBA-B_9DyCLV.js";import"./Rect-CUzevAry.js";import"./Utils-BOuZ7yPz.js";import"./VertexElementDescriptor-BLyltQyJ.js";import"./FramebufferObject-Duv1M2bZ.js";import"./ProgramTemplate-ryKZ1ER_.js";import"./TileContainer-D-yq02MZ.js";import"./WGLContainer-BNWltZlW.js";import"./vec3f32-WCVSSNPR.js";import"./StyleDefinition-C0uNkvJe.js";import"./config-DHajyIwB.js";import"./earcut-D9gy186-.js";import"./FeatureCommandQueue-CufzaJ4O.js";import"./TechniqueType-pk2C5RYg.js";import"./GraphShaderModule-BKfzGITj.js";import"./ShaderBuilder-fp-SVMrR.js";import"./BindType-BBwFZqyN.js";import"./utils-Bvx-TTcz.js";import"./constants-BFLErLYb.js";import"./streamLayerUtils-CKwt2uXH.js";import"./QueueProcessor-rKrH6wRl.js";import"./CircularArray-CujHzHWW.js";import"./SDFHelper-DSo09iqH.js";import"./constants-B4mRqufT.js";import"./bundle-B2FM5W1M.js";import"./floorFilterUtils-n6UOt7ty.js";import"./popupUtils-C5pkiBkD.js";import"./RefreshableLayerView-DnUqAe6X.js";let i=class extends g{initialize(){this.addHandles([a((()=>this.view.scale),(()=>this._update()),n)],"constructor")}isUpdating(){const t=this.layer.sublayers.some((s=>s.renderer!=null)),r=this._commandsQueue.updateTracking.updating,o=this._updatingRequiredPromise!=null,p=!this._workerProxy,m=this.dataUpdating,e=t&&(r||o||p||m);return d("esri-2d-log-updating")&&console.log(`Updating FLV2D: ${e}
  -> hasRenderer ${t}
  -> hasPendingCommand ${r}
  -> updatingRequiredFields ${o}
  -> updatingProxy ${p}
  -> updatingPipeline ${m}
`),e}};i=u([l("esri.views.2d.layers.SubtypeGroupLayerView2D")],i);const ai=i;export{ai as default};
