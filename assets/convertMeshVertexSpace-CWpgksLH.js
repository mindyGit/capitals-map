import{ac as p,s as m,ai as s}from"./index-DMtm2B-0.js";import{p as a}from"./MeshVertexAttributes-CecmqwIm.js";import{B as n}from"./vertexSpaceConversion-DzywTvCe.js";import"./meshProperties-Cj6q1fp6.js";import"./mat3f64-B5o_lm6j.js";import"./mat4f64-q_b6UJoq.js";import"./spatialReferenceEllipsoidUtils-JmC-hNcQ.js";import"./computeTranslationToOriginAndRotation-DV129SVf.js";import"./projectPointToVector-B2j9lH_z.js";import"./meshVertexSpaceUtils-DkEJ6zFh.js";import"./MeshLocalVertexSpace-BXX7PZh-.js";import"./vec3-CJ3R2bpU.js";import"./BufferView-DvEMu9uB.js";import"./vec4-DDzHIQiq.js";async function E(t,r,o){await Promise.resolve(),p(o);const e=n(t,r,{useEllipsoid:o?.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new a({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),r);return i.transform=null,i}export{E as convertMeshVertexSpace};
